import React, { useState, useMemo, useEffect } from 'react';
import { Typography, Box, Select, MenuItem, TextField, Button, InputLabel, FormControl, Autocomplete, Chip, Stack, Paper, List, ListItem, ListItemText } from '@mui/material';
// –í–ê–ñ–ù–û: –í MUI v7 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Grid –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç item/container. –ò—Å–ø–æ–ª—å–∑—É–µ–º Unstable_Grid2 –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∏–≤—ã—á–Ω—ã–º API.
import Grid from '@mui/material/Unstable_Grid2';

import ProductCard from './ProductCard';
import { Product as BaseProduct } from '../../interfaces/Product';
import { db } from '../../config/supabase';
import ParameterGallery, { GalleryOption } from './ParameterGallery';
// @ts-ignore
import Fuse from 'fuse.js';

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Product –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
interface Product extends BaseProduct {
  category: string;
  type: string;
  material: string;
  diameter: number;
  connectionType: string;
  brand: string;
  sku: string;
  productgroup?: string;
  subgroup?: string;
}

// –¢–∏–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
interface ProductFiltersProps {
  filters: Filters;
  setFilters: React.Dispatch<React.SetStateAction<Filters>>;
  onReset: () => void;
}

interface Filters {
  category?: string;
  type?: string;
  material?: string;
  diameter?: number;
  connectionType?: string;
  brands?: string[];
  sku?: string;
  keywords?: string;
  diameterMin?: number;
  diameterMax?: number;
  diameterUnit?: string;
  shape?: string;
  diametersInput?: string;
  productgroup?: string;
  subgroup?: string;
}

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
const categories = ['–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–§–∏—Ç–∏–Ω–≥–∏', '–í–µ–Ω—Ç–∏–ª–∏ –∏ –∫—Ä–∞–Ω—ã', '–¢—Ä—É–±—ã', '–°–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ—á–µ–µ'];
const types = ['–ö—Ä–∞–Ω', '–§–∏—Ç–∏–Ω–≥', '–¢—Ä—É–±–∞', '–í–µ–Ω—Ç–∏–ª—å', '–°–∏—Ñ–æ–Ω', '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å'];
const materials = ['–ü–ª–∞—Å—Ç–∏–∫', '–ú–µ—Ç–∞–ª–ª', '–†–µ–∑–∏–Ω–∞', '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'];
const diameters = [
  { label: '1/2"', value: 15 },
  { label: '3/4"', value: 20 },
  { label: '1"', value: 25 },
  { label: '32 –º–º', value: 32 },
  { label: '40 –º–º', value: 40 },
  { label: '50 –º–º', value: 50 },
  { label: '63 –º–º', value: 63 },
];
const connectionTypes = ['–†–µ–∑—å–±–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è', '–†–µ–∑—å–±–∞ –Ω–∞—Ä—É–∂–Ω–∞—è', '–ö–æ–º–ø—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ', '–°–≤–∞—Ä–Ω–æ–µ', 'Push-Fit'];
const brands = ['HUL', 'Sagiv', 'Yoam', 'Kisner', 'Golan'];

const mockProducts: Product[] = [
  {
    id: '1',
    name: '–¢—Ä—É–±–∞ 50–º–º –ü–ª–∞—Å—Ç–∏–∫',
    category: '–¢—Ä—É–±—ã',
    type: '–¢—Ä—É–±–∞',
    material: '–ü–ª–∞—Å—Ç–∏–∫',
    diameter: 50,
    connectionType: '–°–≤–∞—Ä–Ω–æ–µ',
    brand: 'HUL',
    sku: 'T-50-P-HUL',
    compatibleWith: ['2', '3'],
    location: 'A-01-02-03',
    stock: 120,
    imageUrl: 'https://via.placeholder.com/150/0000FF/FFFFFF?text=–¢—Ä—É–±–∞',
    productgroup: '–ì—Ä—É–ø–ø–∞ 1',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 1'
  },
  {
    id: '2',
    name: '–§–∏—Ç–∏–Ω–≥ —É–≥–ª–æ–≤–æ–π 50–º–º',
    category: '–§–∏—Ç–∏–Ω–≥–∏',
    type: '–§–∏—Ç–∏–Ω–≥',
    material: '–ü–ª–∞—Å—Ç–∏–∫',
    diameter: 50,
    connectionType: '–°–≤–∞—Ä–Ω–æ–µ',
    brand: 'Sagiv',
    sku: 'F-50-P-S-90',
    compatibleWith: ['1'],
    location: 'A-01-03-01',
    stock: 45,
    imageUrl: 'https://via.placeholder.com/150/00FF00/FFFFFF?text=–§–∏—Ç–∏–Ω–≥',
    productgroup: '–ì—Ä—É–ø–ø–∞ 1',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 1'
  },
  {
    id: '3',
    name: '–ö—Ä–∞–Ω —à–∞—Ä–æ–≤—ã–π 1/2"',
    category: '–í–µ–Ω—Ç–∏–ª–∏ –∏ –∫—Ä–∞–Ω—ã',
    type: '–ö—Ä–∞–Ω',
    material: '–ú–µ—Ç–∞–ª–ª',
    diameter: 15,
    connectionType: '–†–µ–∑—å–±–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è',
    brand: 'Yoam',
    sku: 'V-15-M-Y',
    compatibleWith: [],
    location: 'B-02-01-04',
    stock: 30,
    imageUrl: 'https://via.placeholder.com/150/FF0000/FFFFFF?text=–ö—Ä–∞–Ω',
    productgroup: '–ì—Ä—É–ø–ø–∞ 2',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 2'
  },
  {
    id: '4',
    name: '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å —Ä–µ–∑–∏–Ω–æ–≤—ã–π 40–º–º',
    category: '–§–∏—Ç–∏–Ω–≥–∏',
    type: '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å',
    material: '–†–µ–∑–∏–Ω–∞',
    diameter: 40,
    connectionType: '–ö–æ–º–ø—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–µ',
    brand: 'Kisner',
    sku: 'S-40-R-K',
    compatibleWith: [],
    location: 'C-03-02-01',
    stock: 200,
    imageUrl: 'https://via.placeholder.com/150/FFFF00/000000?text=–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å',
    productgroup: '–ì—Ä—É–ø–ø–∞ 2',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 2'
  },
  {
    id: '5',
    name: '–¢—Ä—É–±–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è 25–º–º',
    category: '–¢—Ä—É–±—ã',
    type: '–¢—Ä—É–±–∞',
    material: '–ú–µ—Ç–∞–ª–ª',
    diameter: 25,
    connectionType: '–†–µ–∑—å–±–∞ –Ω–∞—Ä—É–∂–Ω–∞—è',
    brand: 'Golan',
    sku: 'T-25-M-G',
    compatibleWith: [],
    location: 'A-02-01-05',
    stock: 15,
    imageUrl: 'https://via.placeholder.com/150/888888/FFFFFF?text=–¢—Ä—É–±–∞',
    productgroup: '–ì—Ä—É–ø–ø–∞ 3',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 3'
  },
  {
    id: '6',
    name: '–§–∏—Ç–∏–Ω–≥ —Ç—Ä–æ–π–Ω–∏–∫ 25–º–º',
    category: '–§–∏—Ç–∏–Ω–≥–∏',
    type: '–§–∏—Ç–∏–Ω–≥',
    material: '–ú–µ—Ç–∞–ª–ª',
    diameter: 25,
    connectionType: '–†–µ–∑—å–±–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è',
    brand: 'Golan',
    sku: 'F-25-M-G-T',
    compatibleWith: ['5'],
    location: 'A-02-02-01',
    stock: 0,
    imageUrl: 'https://via.placeholder.com/150/00FFFF/000000?text=–¢—Ä–æ–π–Ω–∏–∫',
    productgroup: '–ì—Ä—É–ø–ø–∞ 3',
    subgroup: '–ü–æ–¥–≥—Ä—É–ø–ø–∞ 3'
  }
];

const materialOptions: GalleryOption[] = [
  { key: 'brass', label: '–õ–∞—Ç—É–Ω—å', icon: 'ü•á' },
  { key: 'plastic', label: '–ü–ª–∞—Å—Ç–∏–∫', icon: 'üß™' },
  { key: 'steel', label: '–°—Ç–∞–ª—å', icon: 'üî©' },
  { key: 'rubber', label: '–†–µ–∑–∏–Ω–∞', icon: '‚ö´' },
];

const diameterOptions: GalleryOption[] = diameters.map(d => ({
  key: d.value.toString(),
  label: d.label,
  icon: '‚≠ï',
}));

// –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Fuse.js v6+
type FuseResult<T> = { item: T; score?: number };

const fuseOptions = {
  keys: ['namein_hebrew', 'sku', 'adress_in_warehouse'],
  threshold: 0.4,
  minMatchCharLength: 2,
  includeScore: true,
};

const ProductCatalog: React.FC = () => {
  const [products, setProducts] = useState<any[]>([]); // any, —Ç.–∫. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ –±–∞–∑—ã
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<Filters>({});
  const [selectedParams, setSelectedParams] = useState({
    material: null as string | null,
    type: null as string | null,
    diameter: null as string | null,
    connection: null as string | null,
  });
  const [query, setQuery] = useState('');

  useEffect(() => {
    db.getProducts()
      .then(data => {
        // –ú–∞–ø–ø–∏–Ω–≥: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—è –∏–∑ –±–∞–∑—ã –≤ –Ω—É–∂–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        const mapped = data.map((item: any) => ({
          id: item.id,
          name: item.namein_hebrew || '',
          namein_hebrew: item.namein_hebrew || '',
          sku: item.sku || '',
          adress_in_warehouse: item.adress_in_warehouse || '',
          material: '',
          diameter: '',
          type: '',
          stock: 0,
          location: item.adress_in_warehouse || '',
          imageUrl: '',
        }));
        setProducts(mapped);
        setLoading(false);
      })
      .catch(e => {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        setLoading(false);
      });
  }, []);

  const fuse = useMemo(() => new Fuse(products, fuseOptions), [products]);

  const fuzzyResults = useMemo(() => {
    if (!query) return [];
    return fuse.search(query).slice(0, 20);
  }, [query, fuse]);

  const allGroups = Array.from(new Set(products.map(p => p.productgroup).filter(Boolean)));
  const allSubgroups = (group: string) => Array.from(new Set(products.filter(p => p.productgroup === group).map(p => p.subgroup).filter(Boolean)));

  const filteredProducts = useMemo(() => {
    return products.filter(product => {
      if (filters.category && product.category !== filters.category) return false;
      if (filters.type && product.type !== filters.type) return false;
      if (filters.material && product.material !== filters.material) return false;
      if (filters.diameterMin !== undefined && product.diameter < filters.diameterMin) return false;
      if (filters.diameterMax !== undefined && product.diameter > filters.diameterMax) return false;
      if (filters.diameterUnit && product.diameterUnit && product.diameterUnit !== filters.diameterUnit) return false;
      if (filters.connectionType && product.connectionType !== filters.connectionType) return false;
      if (filters.brands && filters.brands.length > 0 && !filters.brands.includes(product.brand)) return false;
      if (filters.sku && product.sku && !product.sku.toLowerCase().includes(filters.sku.toLowerCase())) return false;
      if (filters.keywords && product.name && !product.name.toLowerCase().includes(filters.keywords.toLowerCase())) return false;
      if (filters.shape && product.shape !== filters.shape) return false;
      if (filters.diametersInput) {
        const inputArr = filters.diametersInput.split(',').map(s => Number(s.trim())).filter(Boolean);
        if (!product.diameters || product.diameters.length !== inputArr.length || !product.diameters.every((d: number, i: number) => d === inputArr[i])) return false;
      }
      if (filters.productgroup && product.productgroup !== filters.productgroup) return false;
      if (filters.subgroup && product.subgroup !== filters.subgroup) return false;
      return true;
    });
  }, [products, filters]);

  // –û–ø—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∏ –¥–∏–∞–º–µ—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/—Ç–∏–ø–∞
  const typeOptions: GalleryOption[] = useMemo(() => {
    if (!selectedParams.material) return [];
    const typesSet = new Set(
      mockProducts
        .filter(p => p.material === selectedParams.material)
        .map(p => p.type)
    );
    return Array.from(typesSet).map(type => ({ key: type, label: type }));
  }, [selectedParams.material]);

  const diameterOptionsStep: GalleryOption[] = useMemo(() => {
    if (!selectedParams.material || !selectedParams.type) return [];
    const diamSet = new Set(
      mockProducts
        .filter(p => p.material === selectedParams.material && p.type === selectedParams.type)
        .map(p => p.diameter)
    );
    return Array.from(diamSet).map(d => ({ key: d.toString(), label: d.toString(), icon: '‚≠ï' }));
  }, [selectedParams.material, selectedParams.type]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetAllParams = () => {
    setSelectedParams({ material: null, type: null, diameter: null, connection: null });
  };
  const resetParam = (param: keyof typeof selectedParams) => {
    setSelectedParams(prev => ({ ...prev, [param]: null }));
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–∞–ª–µ—Ä–µ–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  useEffect(() => {
    setFilters(prev => ({
      ...prev,
      material: selectedParams.material || undefined,
      type: selectedParams.type || undefined,
      diameter: selectedParams.diameter ? Number(selectedParams.diameter) : undefined,
    }));
    // eslint-disable-next-line
  }, [selectedParams.material, selectedParams.type, selectedParams.diameter]);

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (chips)
  const selectedChips = [
    selectedParams.material && {
      key: 'material',
      label: selectedParams.material,
      onDelete: () => resetParam('material'),
    },
    selectedParams.type && {
      key: 'type',
      label: selectedParams.type,
      onDelete: () => resetParam('type'),
    },
    selectedParams.diameter && {
      key: 'diameter',
      label: selectedParams.diameter,
      onDelete: () => resetParam('diameter'),
    },
  ].filter(Boolean);

  // –ì–∞–ª–µ—Ä–µ—è —à–∞–≥–æ–≤
  function renderGalleryStep() {
    if (!selectedParams.material) {
      return (
        <ParameterGallery
          step="material"
          options={materialOptions}
          onSelect={option => {
            setSelectedParams(prev => ({ ...prev, material: option.label, type: null, diameter: null, connection: null }));
          }}
          title="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª (—à–∞–≥ 1 –∏–∑ 4)"
        />
      );
    }
    if (!selectedParams.type) {
      return (
        <ParameterGallery
          step="type"
          options={typeOptions}
          onSelect={option => {
            setSelectedParams(prev => ({ ...prev, type: option.label, diameter: null, connection: null }));
          }}
          title="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (—à–∞–≥ 2 –∏–∑ 4)"
        />
      );
    }
    if (!selectedParams.diameter) {
      return (
        <ParameterGallery
          step="diameter"
          options={diameterOptionsStep}
          onSelect={option => {
            setSelectedParams(prev => ({ ...prev, diameter: option.label, connection: null }));
          }}
          title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä (—à–∞–≥ 3 –∏–∑ 4)"
        />
      );
    }
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    // if (!selectedParams.connection) { ... }
    return null;
  }

  if (loading) return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</Typography>;
  if (error) return <Typography color="error">{error}</Typography>;

  const handleReset = () => setFilters({});
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const ProductFilters: React.FC<ProductFiltersProps> = ({ filters, setFilters, onReset }) => {
    return (
      <Box sx={{ mb: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, boxShadow: 1 }}>
        <Typography variant="h6" gutterBottom>–§–∏–ª—å—Ç—Ä—ã</Typography>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
            <Select
              value={filters.category || ''}
              onChange={(e) => setFilters({ ...filters, category: e.target.value || undefined })}
              label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            >
              <MenuItem value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</MenuItem>
              {categories.map(category => (
                <MenuItem key={category} value={category}>{category}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–¢–∏–ø</InputLabel>
            <Select
              value={filters.type || ''}
              onChange={(e) => setFilters({ ...filters, type: e.target.value || undefined })}
              label="–¢–∏–ø"
            >
              <MenuItem value="">–í—Å–µ —Ç–∏–ø—ã</MenuItem>
              {types.map(type => (
                <MenuItem key={type} value={type}>{type}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–ú–∞—Ç–µ—Ä–∏–∞–ª</InputLabel>
            <Select
              value={filters.material || ''}
              onChange={(e) => setFilters({ ...filters, material: e.target.value || undefined })}
              label="–ú–∞—Ç–µ—Ä–∏–∞–ª"
            >
              <MenuItem value="">–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</MenuItem>
              {materials.map(material => (
                <MenuItem key={material} value={material}>{material}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–î–∏–∞–º–µ—Ç—Ä</InputLabel>
            <Box sx={{ display: 'flex', gap: 1, alignItems: 'center', mt: 1 }}>
              <TextField
                label="–æ—Ç"
                type="number"
                value={filters.diameterMin || ''}
                onChange={e => setFilters({ ...filters, diameterMin: e.target.value ? Number(e.target.value) : undefined })}
                size="small"
                sx={{ width: 80 }}
              />
              <TextField
                label="–¥–æ"
                type="number"
                value={filters.diameterMax || ''}
                onChange={e => setFilters({ ...filters, diameterMax: e.target.value ? Number(e.target.value) : undefined })}
                size="small"
                sx={{ width: 80 }}
              />
              <Select
                value={filters.diameterUnit || '–º–º'}
                onChange={e => setFilters({ ...filters, diameterUnit: e.target.value })}
                size="small"
                sx={{ width: 80 }}
                label="–ï–¥. –∏–∑–º."
              >
                <MenuItem value="–º–º">–º–º</MenuItem>
                <MenuItem value="–¥—é–π–º">–¥—é–π–º</MenuItem>
              </Select>
            </Box>
          </FormControl>

          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</InputLabel>
            <Select
              value={filters.connectionType || ''}
              onChange={(e) => setFilters({ ...filters, connectionType: e.target.value || undefined })}
              label="–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
            >
              <MenuItem value="">–í—Å–µ —Ç–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</MenuItem>
              {connectionTypes.map(connectionType => (
                <MenuItem key={connectionType} value={connectionType}>{connectionType}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 200 }}>
            <Autocomplete
              multiple
              options={brands}
              value={filters.brands || []}
              onChange={(_, newValue) => setFilters({ ...filters, brands: newValue.length ? newValue : undefined })}
              renderInput={(params) => <TextField {...params} label="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏" />}
            />
          </FormControl>

          <TextField
            label="–ê—Ä—Ç–∏–∫—É–ª"
            value={filters.sku || ''}
            onChange={(e) => setFilters({ ...filters, sku: e.target.value || undefined })}
            sx={{ minWidth: 200 }}
          />

          <TextField
            label="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
            value={filters.keywords || ''}
            onChange={(e) => setFilters({ ...filters, keywords: e.target.value || undefined })}
            sx={{ minWidth: 200 }}
          />

          <FormControl sx={{ minWidth: 120 }}>
            <InputLabel>–§–æ—Ä–º–∞</InputLabel>
            <Select
              value={filters.shape || ''}
              onChange={e => setFilters({ ...filters, shape: e.target.value || undefined })}
              label="–§–æ—Ä–º–∞"
            >
              <MenuItem value="">–õ—é–±–∞—è</MenuItem>
              <MenuItem value="T">–¢—Ä–æ–π–Ω–∏–∫ (T)</MenuItem>
              <MenuItem value="Y">Y-–æ–±—Ä–∞–∑–Ω—ã–π (Y)</MenuItem>
              <MenuItem value="L">–£–≥–æ–ª (L)</MenuItem>
              <MenuItem value="X">–ö—Ä–µ—Å—Ç–æ–≤–∏–Ω–∞ (X)</MenuItem>
            </Select>
          </FormControl>

          <TextField
            label="–î–∏–∞–º–µ—Ç—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 16,16,20)"
            value={filters.diametersInput || ''}
            onChange={e => setFilters({ ...filters, diametersInput: e.target.value })}
            sx={{ minWidth: 220 }}
          />

          <FormControl sx={{ minWidth: 220 }}>
            <InputLabel>–ì—Ä—É–ø–ø–∞</InputLabel>
            <Select
              value={filters.productgroup || ''}
              onChange={e => setFilters({ ...filters, productgroup: e.target.value, subgroup: '' })}
              label="–ì—Ä—É–ø–ø–∞"
            >
              <MenuItem value="">–í—Å–µ –≥—Ä—É–ø–ø—ã</MenuItem>
              {allGroups.map(group => (
                <MenuItem key={group} value={group}>{group}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 220 }}>
            <InputLabel>–ü–æ–¥–≥—Ä—É–ø–ø–∞</InputLabel>
            <Select
              value={filters.subgroup || ''}
              onChange={e => setFilters({ ...filters, subgroup: e.target.value })}
              label="–ü–æ–¥–≥—Ä—É–ø–ø–∞"
              disabled={!filters.productgroup}
            >
              <MenuItem value="">–í—Å–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã</MenuItem>
              {(filters.productgroup ? allSubgroups(filters.productgroup) : []).map(subgroup => (
                <MenuItem key={subgroup} value={subgroup}>{subgroup}</MenuItem>
              ))}
            </Select>
          </FormControl>

          <Button variant="outlined" onClick={onReset} sx={{ height: 56 }}>–°–±—Ä–æ—Å–∏—Ç—å</Button>
        </Box>
      </Box>
    );
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</Typography>
      <TextField
        fullWidth
        label="–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –∞–¥—Ä–µ—Å—É (—Ñ–∞–∑–∑–∏)"
        value={query}
        onChange={e => setQuery(e.target.value)}
        sx={{ mb: 3 }}
      />
      {query ? (
        <Paper sx={{ mb: 3 }}>
          <List>
            {fuzzyResults.length === 0 && (
              <ListItem>
                <ListItemText primary="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" />
              </ListItem>
            )}
            {fuzzyResults.map((result: FuseResult<any>) => (
              <ListItem key={result.item.SKU || result.item.sku}>
                <ListItemText
                  primary={result.item.NAMEIN_HEBREW || result.item.name}
                  secondary={`SKU: ${result.item.SKU || result.item.sku} | –ê–¥—Ä–µ—Å: ${result.item.ADRESS_IN_WAREHOUSE || result.item.location}`}
                />
              </ListItem>
            ))}
          </List>
        </Paper>
      ) : null}
      {!query && (
        <>
          <ProductFilters filters={filters} setFilters={setFilters} onReset={handleReset} />
          <Box sx={{
            display: 'grid',
            gridTemplateColumns: {
              xs: '1fr',
              sm: 'repeat(2, 1fr)',
              md: 'repeat(3, 1fr)',
              lg: 'repeat(4, 1fr)'
            },
            gap: 2
          }}>
            {filteredProducts.map((product, idx) => (
              <Box key={product.id || product.sku || idx}>
                <ProductCard
                  product={product}
                  onShowDetails={() => {}}
                  onShowLocation={() => {}}
                  onAddToOrder={() => {}}
                />
              </Box>
            ))}
          </Box>
        </>
      )}
    </Box>
  );
};

export default ProductCatalog;
